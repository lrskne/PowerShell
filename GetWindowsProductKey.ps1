$ErrorActionPreference = 'SilentlyContinue'

Set-StrictMode -Version Latest

trap
{
    Write-Host -Object $_
    continue
}



function Invoke-Main 
{


    'starting script '

    $script:output_file = 'PK_Laura_output.txt'
    if (Test-Path $output_file) {
        remove-item $output_file
    }

    'This file was generated by GetWindowsProductKey.ps1 written by Laura Erskine .. expert programmer' + (Get-Date)  | out-file $script:output_file
    Get-WindowsKey  '.' 'Software\Microsoft\Windows NT\CurrentVersion' 'DigitalProductId4'
    Get-WindowsKey  '.' 'Software\Microsoft\Windows NT\CurrentVersion' 'DigitalProductId'
   
    Get-WindowsKey  '.' 'Software\Microsoft\Windows NT\CurrentVersion\DefaultProductKey' 'DigitalProductId4'
    Get-WindowsKey  '.' 'Software\Microsoft\Windows NT\CurrentVersion\DefaultProductKey' 'DigitalProductId'
   
    Get-WindowsKey  '.' 'Software\Microsoft\Windows NT\CurrentVersion\DefaultProductKey2' 'DigitalProductId4'
    Get-WindowsKey  '.' 'Software\Microsoft\Windows NT\CurrentVersion\DefaultProductKey2' 'DigitalProductId'

    Get-WindowsKey  '.' 'SYSTEM\Setup\Source OS' 'DigitalProductId4'
    Get-WindowsKey  '.' 'SYSTEM\Setup\Source OS' 'DigitalProductId'

    Get-BIOSKey
    Get-Bios '.'

    'end script'
}

function Get-BIOSKey
{
'The original OEM Product Key - this is from the BIOS!!!'
  (Get-WmiObject -query ‘select * from SoftwareLicensingService’).OA3xOriginalProductKey
}

function Get-Bios {
    param (
      $targets = '.'
    )

  #The Windows Management Instrumentation (WMI) Software Licensing provider retrieves software licensing data. 
  #The classes are defined in SppWmi.mof and are located in the "root\cimv2" namespace.
  
  # You can also do this command to get information out of the SoftwareLicensingService
  
  $slp = [WMIClass]"\\$targets\root\default:stdRegProv"

  $winSlp = Get-WmiObject -Class SoftwareLicensingService

  $obj = New-Object -TypeName Object
  $obj | Add-Member -MemberType NoteProperty -Name RegPath -Value $winSlp.PSComputerName
  $obj | Add-Member -MemberType NoteProperty -Name RegValue -Value $winSlp.__PATH
  $obj | Add-Member -MemberType Noteproperty -Name ProductKey -Value $winSlp.OA3xOriginalProductKey
  $obj
  $obj | Out-file -append $script:output_file
  
}
function Get-WindowsKey 
{

    # targets collection - would be list of pc's to be checked, if just checking one pc this would be set to '.'
    ## function to retrieve the Windows Product Key from any PC
    #[cmdletbinding(SupportsShouldProcess = $True)]
    param (
      $targets = '.', 
      $regPath = 'Software\Microsoft\Windows NT\CurrentVersion', 
      $regValue = 'DigitalProductId4' 
    )
    $targets
    $regPath
    $regValue


   
    $hklm = 2147483650

    Foreach ($target in $targets) 
    {
        
        Write-Progress -Activity "Prosessing $target (period means localhost will be used by wmi)"
        
        $productKey = $null
        $win32os = $null
        $wmi = [WMIClass]"\\$target\root\default:stdRegProv"
        $data = $wmi.GetBinaryValue($hklm,$regPath,$regValue)
        $binArray = ($data.uValue)[52..66]
        $charsArray = 'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'M', 'P', 'Q', 'R', 'T', 'V', 'W', 'X', 'Y', '2', '3', '4', '6', '7', '8', '9'
        ## decrypt base24 encoded binary data
        For($i = 24; $i -ge 0; $i--) 
        {
            $k = 0
            For ($j = 14; $j -ge 0; $j--) 
            {
                $k = $k * 256 -bxor $binArray[$j]
                $binArray[$j] = [math]::truncate($k / 24)
                $k = $k % 24
            }
            $productKey = $charsArray[$k] + $productKey
            If (($i % 5 -eq 0) -and ($i -ne 0)) 
            {
                $productKey = '-' + $productKey
            }
        }

        # Create an object for displaying the values in the returned wmiobject
        # and show the values found

        $win32os = Get-WmiObject -Class Win32_OperatingSystem -ComputerName $target
        $obj = New-Object -TypeName Object
        $obj | Add-Member -MemberType NoteProperty -Name RegPath -Value $regPath
        $obj | Add-Member -MemberType NoteProperty -Name RegValue -Value $regValue
        $obj | Add-Member -MemberType Noteproperty -Name Computer -Value $target
        $obj | Add-Member -MemberType Noteproperty -Name Caption -Value $win32os.Caption
        $obj | Add-Member -MemberType Noteproperty -Name CSDVersion -Value $win32os.CSDVersion
        $obj | Add-Member -MemberType Noteproperty -Name OSArch -Value $win32os.OSArchitecture
        $obj | Add-Member -MemberType Noteproperty -Name BuildNumber -Value $win32os.BuildNumber
        $obj | Add-Member -MemberType Noteproperty -Name RegisteredTo -Value $win32os.RegisteredUser
        $obj | Add-Member -MemberType Noteproperty -Name ProductID -Value $win32os.SerialNumber
        $obj | Add-Member -MemberType Noteproperty -Name ProductKey -Value $productKey
        $obj
        $obj | Out-File -append  $script:output_file
        
    }
}  #end of function

. Invoke-Main
